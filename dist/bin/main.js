#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const aws_eks_1 = require("@aws-cdk/aws-eks");
// Blueprint
const eks_blueprint_stack_1 = require("../lib/stacks/eks-blueprint-stack");
// Addons 
const addon = require("../lib/addons");
// Cluster Providers
const fargate_cluster_provider_1 = require("../lib/cluster-providers/fargate-cluster-provider");
const ec2_cluster_provider_1 = require("../lib/cluster-providers/ec2-cluster-provider");
// Pipeline
const pipeline_stack_1 = require("../lib/stacks/pipeline-stack");
// Teams
const setup_1 = require("../lib/teams/team-burnham/setup");
const setup_2 = require("../lib/teams/team-riker/setup");
const setup_3 = require("../lib/teams/team-troi/setup");
const app = new cdk.App();
const addOns = [
    new addon.CalicoAddon,
    new addon.MetricsServerAddon,
    new addon.ClusterAutoScalerAddon,
    new addon.ContainerInsightsAddOn,
    new addon.NginxAddon,
    new addon.ArgoCDAddon
];
const allTeams = [
    new setup_3.TeamTroiSetup,
    new setup_2.TeamRikerSetup,
    new setup_1.TeamBurnhamSetup
];
new pipeline_stack_1.PipelineStack(app, "factory-pipeline", {
    env: {
        account: "929819487611",
        region: 'us-east-2'
    },
});
new eks_blueprint_stack_1.CdkEksBlueprintStack(app, { id: 'east-dev', addOns: addOns, teams: allTeams }, {
    env: {
        region: 'us-east-2'
    },
});
new eks_blueprint_stack_1.CdkEksBlueprintStack(app, { id: 'west-dev', addOns: addOns, teams: allTeams }, {
    env: {
        region: 'us-west-2'
    },
});
new eks_blueprint_stack_1.CdkEksBlueprintStack(app, { id: 'east-test-main', addOns: addOns }, {
    env: {
        account: '929819487611',
        region: 'us-east-1',
    },
});
const fargateProfiles = new Map([
    ["dynatrace", { selectors: [{ namespace: "dynatrace" }] }]
]);
new eks_blueprint_stack_1.CdkEksBlueprintStack(app, { id: 'east-fargate-test', clusterProvider: new fargate_cluster_provider_1.FargateClusterProvider(fargateProfiles) }, {
    env: {
        region: 'us-east-1'
    }
});
class BottlerocketClusterProvider {
    createCluster(scope, vpc, version) {
        const cluster = new aws_eks_1.Cluster(scope, scope.node.id, {
            vpc: vpc,
            clusterName: scope.node.id,
            outputClusterName: true,
            defaultCapacity: 0,
            version: version,
        });
        const nodeGroup = cluster.addAutoScalingGroupCapacity('BottlerocketNodes', {
            instanceType: new aws_ec2_1.InstanceType('t3.small'),
            minCapacity: 2,
            machineImageType: aws_eks_1.MachineImageType.BOTTLEROCKET
        });
        return { cluster: cluster, autoscalingGroup: nodeGroup, version };
    }
}
new eks_blueprint_stack_1.CdkEksBlueprintStack(app, { id: 'east-br-test', clusterProvider: new BottlerocketClusterProvider }, {
    env: {
        region: 'us-east-1'
    }
});
const props = {
    version: aws_eks_1.KubernetesVersion.V1_19,
    instanceType: new aws_ec2_1.InstanceType('t3.large'),
    amiType: aws_eks_1.NodegroupAmiType.AL2_X86_64
};
const myClusterProvider = new ec2_cluster_provider_1.EC2ClusterProvider(props);
new eks_blueprint_stack_1.CdkEksBlueprintStack(app, { id: "test-cluster-provider", clusterProvider: myClusterProvider });
//# sourceMappingURL=data:application/json;base64,
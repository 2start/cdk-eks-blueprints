"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeYaml = exports.loadExternalYaml = exports.loadYaml = exports.readYamlDocument = exports.readYamlFromDir = void 0;
const fs = require("fs");
const yaml = require("js-yaml");
const sync_request_1 = require("sync-request");
function readYamlFromDir(dir, cluster) {
    fs.readdir(dir, 'utf8', (err, files) => {
        if (files != undefined) {
            files.forEach((file) => {
                if (file.split('.').pop() == 'yaml') {
                    fs.readFile(dir + file, 'utf8', (err, data) => {
                        if (data != undefined) {
                            let i = 0;
                            yaml.loadAll(data).forEach((item) => {
                                cluster.addManifest(file.substr(0, file.length - 5) + i, item);
                                i++;
                            });
                        }
                    });
                }
            });
        }
        else {
            console.log(`${dir} is empty`);
        }
    });
}
exports.readYamlFromDir = readYamlFromDir;
function readYamlDocument(path) {
    try {
        const doc = fs.readFileSync(path, 'utf8');
        return doc;
    }
    catch (e) {
        console.log(e + ' for path: ' + path);
        throw e;
    }
}
exports.readYamlDocument = readYamlDocument;
function loadYaml(document) {
    return yaml.safeLoad(document);
}
exports.loadYaml = loadYaml;
function loadExternalYaml(url) {
    return yaml.safeLoadAll(sync_request_1.default('GET', url).getBody().toString());
}
exports.loadExternalYaml = loadExternalYaml;
function serializeYaml(document) {
    return yaml.safeDump(document);
}
exports.serializeYaml = serializeYaml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFtbC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi91dGlscy95YW1sLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlCQUF5QjtBQUN6QixnQ0FBZ0M7QUFFaEMsK0NBQW1DO0FBRW5DLFNBQWdCLGVBQWUsQ0FBQyxHQUFXLEVBQUUsT0FBb0I7SUFDN0QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ25DLElBQUksS0FBSyxJQUFJLFNBQVMsRUFBRTtZQUNwQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ25CLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxNQUFNLEVBQUU7b0JBQ2pDLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7d0JBQzFDLElBQUksSUFBSSxJQUFJLFNBQVMsRUFBRTs0QkFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzRCQUNWLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0NBQ2hDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0NBQy9ELENBQUMsRUFBRSxDQUFDOzRCQUNSLENBQUMsQ0FBQyxDQUFBO3lCQUNMO29CQUNMLENBQUMsQ0FBQyxDQUFBO2lCQUNMO1lBQ0wsQ0FBQyxDQUFDLENBQUE7U0FDTDthQUFNO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDLENBQUM7U0FDbEM7SUFFTCxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUM7QUFyQkQsMENBcUJDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsSUFBWTtJQUN6QyxJQUFJO1FBQ0EsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUMsT0FBTyxHQUFHLENBQUM7S0FDZDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxDQUFDO0tBQ1g7QUFDTCxDQUFDO0FBUkQsNENBUUM7QUFHRCxTQUFnQixRQUFRLENBQUMsUUFBZ0I7SUFDckMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFGRCw0QkFFQztBQUVELFNBQWdCLGdCQUFnQixDQUFDLEdBQVc7SUFDeEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLHNCQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDdEUsQ0FBQztBQUZELDRDQUVDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLFFBQWE7SUFDdkMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFGRCxzQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHlhbWwgZnJvbSAnanMteWFtbCc7XG5pbXBvcnQgKiBhcyBla3MgZnJvbSAnQGF3cy1jZGsvYXdzLWVrcyc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdzeW5jLXJlcXVlc3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVhZFlhbWxGcm9tRGlyKGRpcjogc3RyaW5nLCBjbHVzdGVyOiBla3MuQ2x1c3Rlcik6IHZvaWQge1xuICAgIGZzLnJlYWRkaXIoZGlyLCAndXRmOCcsIChlcnIsIGZpbGVzKSA9PiB7XG4gICAgICAgIGlmIChmaWxlcyAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZS5zcGxpdCgnLicpLnBvcCgpID09ICd5YW1sJykge1xuICAgICAgICAgICAgICAgICAgICBmcy5yZWFkRmlsZShkaXIgKyBmaWxlLCAndXRmOCcsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5YW1sLmxvYWRBbGwoZGF0YSkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHVzdGVyLmFkZE1hbmlmZXN0KGZpbGUuc3Vic3RyKDAsIGZpbGUubGVuZ3RoIC0gNSkgKyBpLCBpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2Rpcn0gaXMgZW1wdHlgKTtcbiAgICAgICAgfVxuXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRZYW1sRG9jdW1lbnQocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkb2MgPSBmcy5yZWFkRmlsZVN5bmMocGF0aCwgJ3V0ZjgnKTtcbiAgICAgICAgcmV0dXJuIGRvYztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUgKyAnIGZvciBwYXRoOiAnICsgcGF0aCk7XG4gICAgICAgIHRocm93IGU7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkWWFtbChkb2N1bWVudDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4geWFtbC5zYWZlTG9hZChkb2N1bWVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRXh0ZXJuYWxZYW1sKHVybDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4geWFtbC5zYWZlTG9hZEFsbChyZXF1ZXN0KCdHRVQnLCB1cmwpLmdldEJvZHkoKS50b1N0cmluZygpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVlhbWwoZG9jdW1lbnQ6IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHlhbWwuc2FmZUR1bXAoZG9jdW1lbnQpO1xufSJdfQ==
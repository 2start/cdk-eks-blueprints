"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EC2ClusterProvider = void 0;
const aws_eks_1 = require("@aws-cdk/aws-eks");
class EC2ClusterProvider {
    constructor(options) {
        this.providerOptions = options !== null && options !== void 0 ? options : { version: aws_eks_1.KubernetesVersion.V1_19 };
    }
    createCluster(scope, vpc, version) {
        const id = scope.node.id;
        const cluster = new aws_eks_1.Cluster(scope, id, {
            vpc: vpc,
            clusterName: id,
            outputClusterName: true,
            defaultCapacity: 0,
            version: this.providerOptions.version,
            vpcSubnets: this.providerOptions.vpcSubnets,
        });
        const nodeGroup = cluster.addNodegroupCapacity(id + "-ng", {
            instanceType: this.providerOptions.instanceType,
            amiType: this.providerOptions.amiType,
            minSize: this.providerOptions.minSize,
            maxSize: this.providerOptions.maxSize
        });
        return { cluster: cluster, nodeGroup: nodeGroup, version: version };
    }
}
exports.EC2ClusterProvider = EC2ClusterProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWMyLWNsdXN0ZXItcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY2x1c3Rlci1wcm92aWRlcnMvZWMyLWNsdXN0ZXItcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsOENBQXNHO0FBZ0J0RyxNQUFhLGtCQUFrQjtJQUkzQixZQUFZLE9BQWlDO1FBQ3pDLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxhQUFQLE9BQU8sY0FBUCxPQUFPLEdBQUksRUFBRSxPQUFPLEVBQUUsMkJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0UsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFnQixFQUFFLEdBQVMsRUFBRSxPQUEwQjtRQUVqRSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUV6QixNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNuQyxHQUFHLEVBQUUsR0FBRztZQUNSLFdBQVcsRUFBRSxFQUFFO1lBQ2YsaUJBQWlCLEVBQUUsSUFBSTtZQUN2QixlQUFlLEVBQUUsQ0FBQztZQUNsQixPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPO1lBQ3JDLFVBQVUsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVU7U0FDOUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUU7WUFDdkQsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWTtZQUMvQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPO1lBQ3JDLE9BQU8sRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU87WUFDckMsT0FBTyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTztTQUN4QyxDQUFDLENBQUM7UUFFSCxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUN4RSxDQUFDO0NBRUo7QUEvQkQsZ0RBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcIkBhd3MtY2RrL2NvcmVcIjtcbmltcG9ydCB7IEluc3RhbmNlVHlwZSwgSVZwYywgU3VibmV0U2VsZWN0aW9uIH0gZnJvbSBcIkBhd3MtY2RrL2F3cy1lYzJcIjtcbmltcG9ydCB7IENsdXN0ZXIsIENvbW1vbkNsdXN0ZXJPcHRpb25zLCBLdWJlcm5ldGVzVmVyc2lvbiwgTm9kZWdyb3VwQW1pVHlwZSB9IGZyb20gXCJAYXdzLWNkay9hd3MtZWtzXCI7XG5cbmltcG9ydCB7IENsdXN0ZXJJbmZvLCBDbHVzdGVyUHJvdmlkZXIgfSBmcm9tIFwiLi4vc3RhY2tzL2Vrcy1ibHVlcHJpbnQtc3RhY2tcIjtcblxuZXhwb3J0IGludGVyZmFjZSBFQzJQcm92aWRlckNsdXN0ZXJQcm9wcyBleHRlbmRzIENvbW1vbkNsdXN0ZXJPcHRpb25zIHtcbiAgICBpbnN0YW5jZVR5cGU/OiBJbnN0YW5jZVR5cGU7IC8vIG01LmxhcmdlXG5cbiAgICBtaW5TaXplPzogbnVtYmVyO1xuXG4gICAgbWF4U2l6ZT86IG51bWJlcjtcblxuICAgIGFtaVR5cGU/OiBOb2RlZ3JvdXBBbWlUeXBlLkFMMl9YODZfNjQ7XG5cbiAgICB2cGNTdWJuZXRzPzogU3VibmV0U2VsZWN0aW9uW107XG59XG5cbmV4cG9ydCBjbGFzcyBFQzJDbHVzdGVyUHJvdmlkZXIgaW1wbGVtZW50cyBDbHVzdGVyUHJvdmlkZXIge1xuXG4gICAgcmVhZG9ubHkgcHJvdmlkZXJPcHRpb25zOiBFQzJQcm92aWRlckNsdXN0ZXJQcm9wcztcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBFQzJQcm92aWRlckNsdXN0ZXJQcm9wcykge1xuICAgICAgICB0aGlzLnByb3ZpZGVyT3B0aW9ucyA9IG9wdGlvbnMgPz8geyB2ZXJzaW9uOiBLdWJlcm5ldGVzVmVyc2lvbi5WMV8xOSB9O1xuICAgIH1cblxuICAgIGNyZWF0ZUNsdXN0ZXIoc2NvcGU6IENvbnN0cnVjdCwgdnBjOiBJVnBjLCB2ZXJzaW9uOiBLdWJlcm5ldGVzVmVyc2lvbik6IENsdXN0ZXJJbmZvIHtcblxuICAgICAgICBjb25zdCBpZCA9IHNjb3BlLm5vZGUuaWQ7XG5cbiAgICAgICAgY29uc3QgY2x1c3RlciA9IG5ldyBDbHVzdGVyKHNjb3BlLCBpZCwge1xuICAgICAgICAgICAgdnBjOiB2cGMsXG4gICAgICAgICAgICBjbHVzdGVyTmFtZTogaWQsXG4gICAgICAgICAgICBvdXRwdXRDbHVzdGVyTmFtZTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHRDYXBhY2l0eTogMCwgLy8gd2Ugd2FudCB0byBtYW5hZ2UgY2FwYWNpdHkgb3Vyc2VsdmVzXG4gICAgICAgICAgICB2ZXJzaW9uOiB0aGlzLnByb3ZpZGVyT3B0aW9ucy52ZXJzaW9uLFxuICAgICAgICAgICAgdnBjU3VibmV0czogdGhpcy5wcm92aWRlck9wdGlvbnMudnBjU3VibmV0cyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgbm9kZUdyb3VwID0gY2x1c3Rlci5hZGROb2RlZ3JvdXBDYXBhY2l0eShpZCArIFwiLW5nXCIsIHtcbiAgICAgICAgICAgIGluc3RhbmNlVHlwZTogdGhpcy5wcm92aWRlck9wdGlvbnMuaW5zdGFuY2VUeXBlLFxuICAgICAgICAgICAgYW1pVHlwZTogdGhpcy5wcm92aWRlck9wdGlvbnMuYW1pVHlwZSxcbiAgICAgICAgICAgIG1pblNpemU6IHRoaXMucHJvdmlkZXJPcHRpb25zLm1pblNpemUsXG4gICAgICAgICAgICBtYXhTaXplOiB0aGlzLnByb3ZpZGVyT3B0aW9ucy5tYXhTaXplXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7IGNsdXN0ZXI6IGNsdXN0ZXIsIG5vZGVHcm91cDogbm9kZUdyb3VwLCB2ZXJzaW9uOiB2ZXJzaW9uIH07XG4gICAgfVxuXG59Il19